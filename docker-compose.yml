version: '3.8'

services:
  # TimescaleDB (PostgreSQL with TimescaleDB extension)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: sentindex-timescaledb
    environment:
      POSTGRES_DB: sentindex
      POSTGRES_USER: sentindex
      POSTGRES_PASSWORD: sentindex_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentindex -d sentindex"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sentindex-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: sentindex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sentindex-network

  # Kafka for message streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: sentindex-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sentindex-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: sentindex-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sentindex-network

  # Sentindex API
  sentindex-api:
    build: .
    container_name: sentindex-api
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      # Database
      DATABASE_HOST: timescaledb
      DATABASE_PORT: 5432
      DATABASE_NAME: sentindex
      DATABASE_USER: sentindex
      DATABASE_PASSWORD: sentindex_password
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      
      # API Keys (set these in .env file)
      ALPHAVANTAGE_API_KEY: ${ALPHAVANTAGE_API_KEY}
      EIA_API_KEY: ${EIA_API_KEY}
      SENTIENT_API_KEY: ${SENTIENT_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ./config.yaml:/app/config.yaml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sentindex-network

  # Data ingestion workers
  data-ingestion:
    build: .
    container_name: sentindex-data-ingestion
    depends_on:
      - sentindex-api
    command: python -m src.services.data_ingestion
    environment:
      # Same environment as API
      DATABASE_HOST: timescaledb
      DATABASE_PORT: 5432
      DATABASE_NAME: sentindex
      DATABASE_USER: sentindex
      DATABASE_PASSWORD: sentindex_password
      
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      
      ALPHAVANTAGE_API_KEY: ${ALPHAVANTAGE_API_KEY}
      EIA_API_KEY: ${EIA_API_KEY}
      SENTIENT_API_KEY: ${SENTIENT_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ./config.yaml:/app/config.yaml:ro
    networks:
      - sentindex-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: sentindex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sentindex-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sentindex-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - sentindex-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: sentindex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - sentindex-api
    networks:
      - sentindex-network

volumes:
  timescaledb_data:
  redis_data:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  sentindex-network:
    driver: bridge
